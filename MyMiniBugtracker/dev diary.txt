10.05.2012 - Beginn der Entwicklung eines webbasierten Bug-Trackers, 

Zunächst möchte ich das Projekt mit GIT versionieren. Dazu benötige ich einen GIT-Hub Account. 
Ich probiere den Account zu verwenden den ich in der Firma angelegt habe. 
Irgendwie kann ich das neu angelegte Repository nicht mehr auschecken. Irgend so ein SSH fehler. 
Ich folge der Installationsanweisung von github (GIT for Windows). Wieder wieder ich das Problem, dass ich mich nicht anmelden kann. 
in der Bash erscheint ständig "permission denied". Mein RSA Key Fingerprint weicht von dem ab, was github.com mir anzeigt. 

Lösung: Aus irgendwelchen gründen hat der keygen die keyfiles in einem Falschen Ordner abgelegt. 
Zielordner sollte sein: C:\Users\Fiederling Daniel\.ssh

Jetzt muss ich das Projekt irgendwie in Eclipse auschecken. 
Nach etwas rumprobieren habe ich es geschafft, indem ich mir in Eclipse einen weiteren SSH-Key angelegt habe und den ebenfalls auf github bekannt gemacht habe. 
Es muss außerdem ein neues Vaadin Projekt angelegt werden, dass dann im heruntergeladenen Repository geshared wird. 
Ich bekomme build Path Errors die ich nicht beheben kann, das Projekt läuft aber auch mit Fehlern. 
Ich versuche das Projekt in ein Maven Projekt zu konvertieren irgendwie läuft dann garnichts mehr und ich komm auch hier auf keinen grünen Zweig und bin langsam frustriert... 

Nachdem ich jetzt 3 Stunden mit Setup verbracht habe will jetzt endlich Programmieren um ergebnisse zu sehen.

Die eigentliche Entwicklung lief dann recht zügig:
Zuerst die Model-Klasse implementiert.
Dann die rudimentäre Benutzeroberfläche in der alle Bugs tabellarisch angezeigt werden.Hierfür habe ich zunächst eine Klasse geschrieben 
die Testdaten in die Tabelle schreibt.
Anschließend habe ich Formular geschrieben um neue Bugs anzulegen. Hier gab es einige Probleme mit den SelectBoxen die ich nicht in der 
createFieldFactory Methode erzeugen konnte. Als workaround habe ich die Felder nachträglich hinzugefügt auch wenn ich das nicht ganz so sauber finde.

Sobald das Formular fertig war, wollte ich die Informationen in eine Db4o Datenbank schreiben. Also schnell nen Service und die DAO erzeugt. 
Das schreiben in die DB hat auch wunderbar funktioniert. Nur als ich die Daten dann wieder komplett auslesen wollte hat mich irgendsoeine 
DatabaseClosedException in den Wahnsinn getrieben. Dabei hätte das Auslesen ja prinzipiell funktioniert, solange ich die db nicht schließe. 
Allerdings konnten dann auch keine Bugs mehr gespeichert werden, weil die DB gelockt ist... Irgendwie komisch und für mich jetz 
erstmal nicht nachvollziehbar, warum das schließen nicht funktioniert. 

Ich höre jetzt auf und checke noch schnell die Files ein. 



15.05.2012 Umstellung auf Maven

Nach dem ersten Feedback von Thomas möchte ich mein Projekt auf Maven umstellen. Mir ist eingefallen, dass ich noch keine WTP integration für Maven installiert habe. 
Also gleich mal nachholen. Jetzt versuche ich das Vaadin Projekt in ein Maven Projekt zu konvertieren. Ok, dann die Dependencies für Vaadin in die .pom einfügen und mal schauen was passiert. 
Hmm... server startet nicht.

java.lang.IllegalArgumentException: Document base \workspace\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\wtpwebapps\spring2 does not exist or is not a readable directory

Was will der denn mit spring2? das hab ich doch noch garnicht installiert bei mir? Mal googlen -- Ah, evtl. sollte ich mal den Server neu installieren. 
Jep, jetzt startet er, aber auf meine Anwendung kann ich nicht zugreifen:

"description The requested resource (/MyMiniBugtracker/) is not available."

Was ist das jetzt schon wieder? Nach einiger Zeit die idee: Wurde die Anwendung richtig deployed? - Nein, es fehlen die classes, also rausfinden wo die classes hin compilliert werden und dann mit in die deployment-assembly.

Jetzt endlich funktioniert es. Nurnoch eine db4o fehlermeldung, ja natürlich brauche ich die dependency auch noch. Schnell mal gucken wo ich das her bekomm. 
Das hier sieht doch ganz gut aus: http://stackoverflow.com/questions/2303424/maven-and-db4o-dependency
JEAH!!! ENDLICH LÄUFT ES!!!. 


Weiterer Feedbackpunkt von Thomas: Spring in das Projekt integrieren. 
Ein glück hab ich schon maven am laufen ;-) Die Dependencies einfach in die POM einfügen. 

Wo krieg ich das jetzt her? 
http://mirrors.ibiblio.org/pub/mirrors/maven2/org/springframework/spring-core/ - Wenn ich jetzt noch wüsste welche Version wir in der Firma verwenden. Ich glaube 2...
http://blog.springsource.com/2011/01/17/green-beans-getting-started-with-maven-and-spring/ - Den Artikel sollte ich mir mal im Detail zu Gemüte führen

Irgendwie muss ich jetzt mein Projekt doch konfigurieren um Autowiring nutzen zu können. *an die application-context.xml denkt*

https://vaadin.com/wiki/-/wiki/Main/Spring%20Integration - Vaadin bietet dazu ein Tutorial, hier geht es demnächst weiter...



18.05.2012 - Spring Integration

So... hat jetzt ne Weile gedauert, aber am Ende habe den Server und die Applikation wieder am laufen und Spring konfiguriert. 
In erster linie habe ich mich am Vaadin Tutorial orientiert. Nachdem ich das alles so zusammenkopiert hatte wie es auf der Tutorialseite beschrieben ist, startete natürlich mein Server nicht. 
Irgend so ne Exception beim Laden des ContextLoaderListener. Auf der Suche nach der lösung bin ich dann irgendwann auf diese Seite gestoßen:

http://www.mkyong.com/spring/spring-error-classnotfoundexception-org-springframework-web-context-contextloaderlistener/

Die hat mir zwar nicht ganz die Lösung geliefert, aber mich auf die Idee gebracht einfach mal das hier in die Pom einzufügen: 

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring</artifactId>
			<version>2.5.2</version>
		</dependency>

Siehe da, der Server startet. Warum wird das nicht gleich auf der Vaadin Seite beschrieben? 

Danach wollte ich einfach mal rein debuggen um zu schauen ob das Autowiring funktioniert, aber allerdings funktioniert aus irgendwelchen Voodoo-Gründen der STRG+O shortcut nimmer. Und es wurde eine Fehlermeldung angezeigt. 
"The Resource is not on Build Path" oder so. Weiß der Geier wo ich in letzter Zeit alles rumgepfuscht hab. Also erstmal das Projekt neu auschecken, jetzt weiß ich ja wie ich Spring anpacken muss.

Gleiches Problem - Lösung aber ganz einfach: 

unter properties-->Java Build Path:

Source Folders on Build Path --> Add Folder...: 
/src Ordner Einfügen

und als Default Output Folder: 
MyMiniBugtracker/WEB-INF/classes

Jetzt startet wieder alles. Aber das Autowiring läuft noch nicht so läuft wie ich mir das vorstelle, ich kriege noch ständig ne nullpointer Exception. Ich muss nochmal nachlesen wie das Autowiring funktioniert. 
Hier geht es demnächst weiter.



22.05.2012

Ich habe jetzt 3 Std. die verschiedensten Dinge Probiert das Autowiring in den Griff zu bekommen und es einfach nicht hinbekommen. Was mach ich nur falsch? Habe ich was übersehen? 
Diese Quellen wirkten besonders interessant:
http://java9s.com/spring-framework/spring-auto-wiring-bytype-byname-constructor
http://stackoverflow.com/questions/3659720/spring-3-autowire-in-standalone-application
https://vaadin.com/forum/-/message_boards/view_message/112083

dennoch konnte ich das Problem nicht lösen. Jetzt brauche ich ein Paar Erfolgserlebnisse und beginne die Anmerkungen von Thomas zu bearbeiten. 
Als erstes möchte ich die Texte in eine messages.properties Datei auslagern. 

wie das am schnellsten geht verrät mir das Book of Vaadin
https://vaadin.com/book/-/page/rapid.i18n.html

Erstmal nur bei einer Klasse um das zu testen.

Wäre ja zu schön wenn das alles glatt laufen würde... Mal wieder eine Exception.
java.util.MissingResourceException: Can't find bundle for base name messagess, locale de_DE
Lösungsidee durch: http://stackoverflow.com/questions/8124638/jsf-bundle-loading-failure

Scheint so, als wäre der Name der Properties Datei fehlerhaft. Also nochmal alles Rückgängig machen und beim Extrahieren darauf achten, dass die Datei erstmal messages.properties heißt. Diese wird immer als Fallback hergenommen. 

Tatsächlich! Jetzt funktioniert es! Also jetzt alle notwendigen Messages extrahieren und dann in einem zweiten Schritt schöne Namen für die Einträge vergeben.

Dann einfach mal Auis kommentare weiter anschauen und einen nach den anderen anpacken. 

Ich stelle fest dass bei einem commit des Formulars nicht alle felder gleichzeitig validiert werden, sondern schon nach dem ersten Feld eine Exception geworfen wird. Evtl. muss ich die Validierung der Felder vor dem 
Commit noch selbst übernehmen. 


29.05.2012 - Db4o CRUD

Heute möchte ich dringend irgendwelche Fortschritte sehen und mich nicht mit irgendwelchen konfigurationen rumschlagen müssen. Als heutiges Ziel habe ich mir gesteckt, mal richtig auf einer DB4O Datenbank zu arbeiten. 
Laden und speichern von Bugs sollte ich doch sicherlich hinkriegen... Und mal schaun, wenn das funktioniert ist editieren sicher nurnoch Formsache. 

Es ist einfach zum Mäusemelken! Ich kann einfach nicht wie im Tutorial beschrieben vorgehen. 

1. DB öffnen, 
2. Auf der DB arbeiten 
3. DB schließen

Beim Versuch bei Programmstart alle Daten aus der Datenbank zu laden und die Datenbank am Ende wieder zu schließen, wird immer eine com.db4o.ext.DatabaseClosedException geworfen. Irgendwie finde ich keine brauchbare Lösung, 
außer die Datenbank nur einmalig bei erzeugen der DB4O Dao zu öffnen und danach nicht mehr zu schließen. Das ist natürlich überhaupt nicht schick und muss irgendwann noch behoben werden. 

Aber sonst ist das Arbeiten mit DB4O echt simpel. Editieren und Löschen von Objekten ist kein Problem gewesen. Beim Editieren eines Bugs werden die ComboBoxen noch nicht mit dem Richtigen Wert vorselektiert. Mit diesem Problem habe ich mich 
auch eine Weile beschäftigt aber für heute ebenfalls keine Lösung gefunden. Naja, das Projekt nimmt so langsam Formen an. Nächste Woche schaue ich mir mal die Architektur nochmal genauer an und schau mal was sich verbessern lässt. 
Außerdem fehlt es an vielen Stellen noch an Kommentaren, die werde ich bei dieser Gelegenheit auch mal ergänzen. 


05.06.2012 - Code Überarbeitung
Heute habe ich den Code etwas aufgeräumt und kommentiert. Insbesondere habe ich probiert die letzen Anmerkungen von Aui bzgl. der Architektur umzusetzen. Dabei habe ich mich an drei Baustellen besonders aufgehalten:
1. Bug: Wenn ich probiert habe, einen existierenden Bug zu editieren wurden immer zwei "Editieren" Fenster beim Doppelklick auf den Bug geöffnet. Das lag daran, dass der Listener zweimal hinzugefuegt wurde. 
	(Einmal in der BugList und ein weiteres mal in der AbstractBugList)
2. Wie erreiche ich es am besten, dass das Datum abhängig von der Locale formatiert wird? Ich habe noch kein zufriedenstellendes Ergebnis und ich muss nochmal nach den "Best practices" recherchieren. 
3. Bei Editieren eines Bugs wird die ComboBox ja noch nicht richtig gesetzt, sondern erscheint leer. Nachdem es wieder so spät war habe ich den versuch abgebrochen und werde ihn nächste Woche wieder aufnehmen. 



12.06.2012 - Bugfixing

Was mir momentan am meisten Kopfzerbrechen bereitet ist, dass die ComboBoxen beim editieren nicht gesetzt werden. Beim Debuggen habe ich herausgefunden, dass die Combobox wohl das richtige Item selektiert hat, mir es jedoch auf der GUI nicht angezeigt wird. 
WARUM??? 
...
NA ENDLICH! Nach einigem Rumprobieren ist die Lösung doch recht simpel. 

Schuld ist die Methode setFormDataSource(bug, Arrays.asList(visiblePropertiesArray)) . Diese ist notwendig alle Datenfeldern mit den richigen werten zu befüllen. Allerdings scheint die Methode bei ComboBoxen nicht richtig zu funktionieren. 
Die gesetzten Werte aus der FormFieldFactory werden überschrieben. Wenn ich die ComboBoxen außerhalb der createField() methode der FormFieldFactory, d.h. nachträglich erzeuge und dem Formular mit addField() hinzufuege, werden auch 
die richtigen Werte gesetzt. 

Der nächste Bug an den ich mich ran mache ist, dass in der Tabelle mit Bugs BugStatus und BugType als Enum angezeigt werden. Ich möchte das dort der Titel der Enum angezeigt wird. Das ist ein easy Bug ^^ es wird in der Modelklasse jeweils eine zusätzliche 
Methode benötigt getBugTypeTitle() die den Titel anhand des bugType Strings ermittelt. Anschließend muss nurnoch in der BugList werden die visibleColumns Liste durch den eintrag "bugTypeTitle" angepasst werden, schon fertig! Gleiches für den status. 

Mir ist außerdem aufgefallen, dass beim Editieren eines Bugs die BugList nicht automatisch aktualisiert wird. Mal sehen wie ich das beheben kann... 
Auch das war ganz einfach, Wenn der Bug sich bereits in der Liste befindet, muss er aus der Liste gelöscht werden und kann dann neu hinzugefügt werden.  

Als nächstes ärgert mich die Validierung der BugForm. Hier sind alles Pflichtfelder, allerdings wird beim Speichern immer nur eine Fehlermeldung angezeigt, auch wenn mehrere Felder Fehlerhaft sind. Ich bin mir nicht ganz sicher ob ich mir da evtl. eine Unsitte von 
Zdenko angeeignet habe, aber es ist für meine Absichten jedenfalls Zweckmäßig. Ich schreibe für jedes Feld eine validate Methode in der ich auf leere Eingabefelder prüfe. Falls ein Feld leer ist, setze ich mit setComponentError(new UserError("message")) die Fehlermeldung. 
Es wird nur gespeichert wenn alles Felder valide sind. 

Und als kleiner Abschluss noch eine Usability Verbesserung: Wenn kein Bug in der Liste selektiert ist, sollen die Buttons "editieren" und "löschen" ausgegraut sein. Wenn ein Wert gewählt wird, werden sie aktiviert. Hierfür wurde der AbstractBugList ein SelectionChangeListener 
hinzugefügt der die Methode onSelectionChange(Object value) ruft. Diese Methode kann in den Kindklassen implementiert werden. Wenn value == null buttons ausgrauen, andernfalls aktivieren.

Wow, heute habe ich doch einiges erreicht! Nächste Woche werde ich mich wohl mal wieder mit der Datenbankproblematik beschäftigen.


19.06.2012 - Überarbeiten Kommentare Aui
Aui hat vergangene Woche sich das Projekt nochmal angeschaut und an einigen Stellen wieder Verbesserungskommentare eingefuegt. Die Kommentare werde ich mir heute ansehen und abarbeiten. Außerdem hat Aui sich das Autowiring Problem mal angesehen und Autowiring gängisch gemacht. 
Diese Änderungen will ich mir auch mal näher ansehen.  

Ich beginne mit der Überarbeitung des BugDao hier meinte Aui es gäbe in Spring bereits eine db4o Anbindung über die sich der ObjectContainer konfigurieren lässt (http://www.springsource.org/extensions/se-db4o). Also auf gehts, gleich  mal anschauen wie das funktioniert. 
Hmm... irgendwie mangelt es mir hier an Dokumentation. Wie konfiguriere ich das denn richtig? Nach einigem Suchen bin ich auf Beispielcode gestoßen der vielversprechend aussieht. 

https://github.com/astubbs/spring-modules/blob/master/samples/db4o/recipemanager/src/webapp/WEB-INF/applicationContext-db4o.xml

Allerdings muss ich das spring-module als dependency einbinden. Also schnell mal ins maven Repository schauen: 

http://mvnrepository.com/artifact/org.springmodules 


Na prima! Es könnte doch einfach mal glatt laufen. Die Dependency kann nicht eingebunden werdne. Scheint so als würde eine bestimmte db4o-Version (6.1-java1.2) voraussetzten, diese aber nicht im Repository finden... Wie kann ich das umgehen? 
Im Repository kann ich das .jar File direkt runterladen, evtl. kann ich ja einfach händisch dem Projekt hinzufügen. Aber was ist dann wohl mit den Abhängigkeiten? Einfach mal ausprobieren... Springmodules hinzugefügt, und den Application-Context wie im Beispielcode angepasst 
 - direkt wieder ein Fehler com.db4o.ext.MemoryFile wird nicht gefunden.
Gibt es das denn in der aktuellen Db4o Version nicht? - NEIN! siehe auch: 

http://community.versant.com/documentation/reference/db4o-8.1/java/api/overview-tree.html und http://community.versant.com/documentation/reference/db4o-6.1/java/api/overview-tree.html

Also auch noch das händisch einbinden... Was läuft immer noch nicht? Gleich nochmal mit dem Beispielcode vergleichen. Oh, das DAO sieht ganz anders aus: 
1. Erbt es von Db4oDaoSupport (hierfür benötige ich offensichtlich eine weitere Spring dependency)
2. Es wird nicht mehr auf den ObjectContainer, sondern auf einem db4o Template gearbeitet. 

Das habe ich jetzt auch mal eingebaut. UND ES FUNKTIONIERT!!! *HERUMHÜPFT*

Das ist ein Guter Zeitpunkt um für heute Feierabend zu machen. Um die anderen Anmerkungen kümmere ich mich dann nächste Woche. 


26.06.2012 - Überarbeiten Kommentare Aui (Fortsetzung)
Ich beginne mit der Überarbeitung der Messages. Aui hat mir erlaubt die Codebank und die darin enthaltene RM Klasse zu verwenden. Ich füge also erstmal das .jar dem Deployment Assembly und dem Build Path hinzu. Hat soweit ganz gut funktioniert. Jetzt muss ich die RM Klasse 
nur noch richtig konfigurieren. Im DMS konnten haben wir das glaube ich über autowiring erledigt. Mal ausprobieren ob ich das hinbekomm..

Jep, funktioniert jetzt. Ich habe in diesem Zug auch zwei lokalisierte .properties Dateien erstellt. Nun noch alle Messages auf die RM Klasse umbiegen. OU, Problem... wie mache ich das wohl mit den Titeln der beiden Enums BugType und BugStatus? Autowiring der RM-Klasse oder das 
Übergeben einer Referenz dorthin geht ja nicht. Ich weiß, dass es in der RM Klasse einen .enumMessage Methode gibt, daher brauchen wir den Titel eigentlich garnichtmehr explizit in der Enum speichern. Nur doof, dass ich auch in der Modelklasse auf den Titel zurückgreife 
um die Tabellenspalten richtig zu erzeugen (Bug Titel statt ENUM). In der Modelklasse funktioniert das Autowiring der RM Klasse ebenfalls nicht... Also was tun???

Nachdem mir nach einer Weile nichts wirklich intelligentes eingefallen ist, schreibe jetzt erstmal einen Workaround, indem ich eine Helper Methode in das Model aufnehme. Diese Methode erzeugt mir das RM nochmal. Nicht wirklich schön, aber zweckmäßig. Vielleicht fällt mir 
demnächst noch was besseres ein. Den Titel kann ich ja auch nicht speichern, da er zwischen den Sprachversionen ja schon abweichen kann.

Ein ähnliches Problem besteht auch bei der Formatierung des Datums prinzipiell würde ich gerne das RM nehmen, aber über die Modelklasse wird das nicht funktionieren. Hmm... Was sagt eigentlich Vaadin zur Internationalisierung von Datumsangaben in einer Tabelle?

Ach, das Löst ja all meine Probleme ^.^: 
https://vaadin.com/forum/-/message_boards/view_message/19014

Es wird in der BugList eine zusätzliche Methode benötigt, die eine Methode formatPropertyValue(Object rowId, Object colId, Property property) aus der Tabelle überschreibt. Hier kann dann anhand der colId die Formatierung der property vorgenommen werden. Die getXYAsString()  
Methoden werden also garnichtmehr im Model gebraucht. Jetzt noch alles schnell Testen und dann mach ich Feierabend für heute. 

Nächste Woche wird es glaub ich mal Zeit ein ordentliches Logging hin zu bekommen. 

